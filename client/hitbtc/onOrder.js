var logger = require('../../log/logger');

/**
 * Parameter        Required	            Type	                    Description
 * clientOrderId	Yes	                    string	                    Unique order ID generated by client. From 8 to 32 characters
 * side	            Yes	                    buy or sell	                Side of a trade
 * type	            No	                    limit,                      Order type
 *                                          stopLimit,
 *                                          stopMarket,
 *                                          market
 * symbol	        Yes	                    string	                    Currency symbol traded on HitBTC exchange (see Currency symbols), e.g. BTCUSD
 * 
 * price	        Yes - for limit orders	decimal	                    Order price
 * quantity	        No	                    integer	                    Order quantity in lots
 * timeInForce	    No	                    GTC - Good-Til-Canceled     Default value - GTC
 *                                          IOC - Immediate-Or-Cancel
 *                                          FOK - Fill-Or-Kill
 *                                          DAY - day	Time in force.
 * stopPrice	    Yes - for stopLimit,    string                      Stop price
 *                  stopMarket
 */

function S4() {
    return (((1+Math.random())*0x10000)|0).toString(16).substring(1); 
}

function parseParams(...args) {

    var [ side, type, coin, price, quantity, timeInForce, stopPrice ] = args;

    var guid = (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4()).toLowerCase();
    var symbol = String(coin).concat(global.Config.trade.base).toUpperCase();

    // Careful for truthy types
    var params = {
        clientOrderId: guid,
        type: type,
        side: side,
        symbol: symbol
    };

    if (price) params.price = Number(price);
    if (quantity) params.quantity = Number(quantity);
    if (timeInForce) params.timeInForce = timeInForce;
    if (stopPrice) params.stopPrice = Number(stopPrice);

    return params;
}

module.exports = function onOrder(...args) {
    var params = parseParams.apply(null, args)

    this.rest.placeOrder(params)
        .then(logger.log)
        .catch(logger.error);
}